{"version":3,"sources":["../src/server-spec.js"],"names":["use","describe","toAddress","ccAddress","bccAddress","replyToAddress","htmlEmail","textEmail","emailSubject","fromEmail","it","done","request","post","send","Action","Source","end","err","res","to","have","status","response","XmlDocument","text","path","valueWithPath","readFileSync","eq","replace"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,eAAKA,GAAL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEAC,SAAS,aAAT,EAAwB,YAAM;AAC5B,MAAMC,YAAY,cAAlB;AACA,MAAMC,YAAY,cAAlB;AACA,MAAMC,aAAa,eAAnB;AACA,MAAMC,iBAAiB,mBAAvB;AACA,MAAMC,YAAY,mBAAlB;AACA,MAAMC,YAAY,YAAlB;AACA,MAAMC,eAAe,kBAArB;AACA,MAAMC,YAAY,gBAAlB;AACAC,KAAG,wCAAH,EAA6C,UAACC,IAAD,EAAU;AACrD,mBAAKC,OAAL,mBACGC,IADH,CACQ,GADR,EAEGC,IAFH,CAEQ;AACJC,cAAQ,WADJ;AAEJ,0CAAoCb,SAFhC;AAGJ,gCAA0BI,SAHtB;AAIJ,gCAA0BC,SAJtB;AAKJ,8BAAwBC,YALpB;AAMJ,0CAAoCL,SANhC;AAOJ,2CAAqCC,UAPjC;AAQJ,mCAA6BC,cARzB;AASJW,cAAQP;AATJ,KAFR,EAaGQ,GAbH,CAaO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,wBAAOA,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACA,UAAMC,WAAW,IAAI,iBAAOC,WAAX,CAAuBL,IAAIM,IAA3B,CAAjB;AACA,UAAMC,OAAOH,SAASI,aAAT,CAAuB,2BAAvB,CAAb;AACA,wBAAO,aAAGC,YAAH,CAAgBF,IAAhB,EAAsB,MAAtB,CAAP,EAAsCN,EAAtC,CAAyCS,EAAzC,CAA4CvB,SAA5C;AACA,wBAAO,aAAGsB,YAAH,CAAgBF,KAAKI,OAAL,CAAa,WAAb,EAA0B,UAA1B,CAAhB,EAAuD,MAAvD,CAAP,EAAuEV,EAAvE,CAA0ES,EAA1E,CAA6EtB,SAA7E;AACA,wBAAO,aAAGqB,YAAH,CAAgBF,KAAKI,OAAL,CAAa,WAAb,EAA0B,aAA1B,CAAhB,EAA0D,MAA1D,CAAP,EAA0EV,EAA1E,CAA6ES,EAA7E,eAA4FrB,YAA5F,sBAAyHN,SAAzH,sBAAmJC,SAAnJ,uBAA8KC,UAA9K,4BAA+MC,cAA/M,kBAA0OI,SAA1O;AACAE;AACD,KArBH;AAsBD,GAvBD;AAwBAD,KAAG,sCAAH,EAA2C,UAACC,IAAD,EAAU;AACnD,mBAAKC,OAAL,mBACGC,IADH,CACQ,GADR,EAEGC,IAFH,CAEQ;AACJC,cAAQ,WADJ;AAEJ,gCAA0BT,SAFtB;AAGJ,gCAA0BC,SAHtB;AAIJ,8BAAwBC,YAJpB;AAKJQ,cAAQP;AALJ,KAFR,EASGQ,GATH,CASO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,wBAAOA,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACA,UAAMC,WAAW,IAAI,iBAAOC,WAAX,CAAuBL,IAAIM,IAA3B,CAAjB;AACA,wBAAOF,SAASI,aAAT,CAAuB,MAAvB,CAAP,EAAuCP,EAAvC,CAA0CS,EAA1C,CAA6C,iBAA7C;AACA,wBAAON,SAASI,aAAT,CAAuB,SAAvB,CAAP,EAA0CP,EAA1C,CAA6CS,EAA7C,CAAgD,0CAAhD;AACAlB;AACD,KAfH;AAgBD,GAjBD;AAkBD,CAnDD","file":"server-spec.js","sourcesContent":["import chai, { expect } from 'chai'\nimport chaiHttp from 'chai-http'\nimport xmldoc from 'xmldoc'\nimport fs from 'fs'\nimport server from './server'\n\nchai.use(chaiHttp)\n\n// describe('Runtime arguments', () => {\n//   it('should clean the output directory when called with --clean', (done) => {\n//     process.argv = ['--clean']\n//     chai.request(server)\n//   })\n// })\n\ndescribe('/POST email', () => {\n  const toAddress = 'to@email.com'\n  const ccAddress = 'cc@email.com'\n  const bccAddress = 'bcc@email.com'\n  const replyToAddress = 'replyTo@email.com'\n  const htmlEmail = '<p>HTML Email</p>'\n  const textEmail = 'Text Email'\n  const emailSubject = 'Email Subject ðŸ˜Š'\n  const fromEmail = 'from@email.com'\n  it('should succeed if email has all params', (done) => {\n    chai.request(server)\n      .post('/')\n      .send({\n        Action: 'SendEmail',\n        'Destination.ToAddresses.member.1': toAddress,\n        'Message.Body.Html.Data': htmlEmail,\n        'Message.Body.Text.Data': textEmail,\n        'Message.Subject.Data': emailSubject,\n        'Destination.CcAddresses.member.1': ccAddress,\n        'Destination.BccAddresses.member.1': bccAddress,\n        'ReplyToAddresses.member.1': replyToAddress,\n        Source: fromEmail,\n      })\n      .end((err, res) => {\n        expect(res).to.have.status(200)\n        const response = new xmldoc.XmlDocument(res.text)\n        const path = response.valueWithPath('SendEmailResult.MessageId')\n        expect(fs.readFileSync(path, 'utf8')).to.eq(htmlEmail)\n        expect(fs.readFileSync(path.replace('body.html', 'body.txt'), 'utf8')).to.eq(textEmail)\n        expect(fs.readFileSync(path.replace('body.html', 'headers.txt'), 'utf8')).to.eq(`Subject: ${emailSubject}\\nTo Address: ${toAddress}\\nCc Address: ${ccAddress}\\nBcc Address: ${bccAddress}\\nReply To Address: ${replyToAddress}\\nSource: ${fromEmail}`)\n        done()\n      })\n  })\n  it('should fail if one param is not sent', (done) => {\n    chai.request(server)\n      .post('/')\n      .send({\n        Action: 'SendEmail',\n        'Message.Body.Html.Data': htmlEmail,\n        'Message.Body.Text.Data': textEmail,\n        'Message.Subject.Data': emailSubject,\n        Source: fromEmail,\n      })\n      .end((err, res) => {\n        expect(res).to.have.status(500)\n        const response = new xmldoc.XmlDocument(res.text)\n        expect(response.valueWithPath('Code')).to.eq('MessageRejected')\n        expect(response.valueWithPath('Message')).to.eq('One or more required fields was not sent')\n        done()\n      })\n  })\n})"]}