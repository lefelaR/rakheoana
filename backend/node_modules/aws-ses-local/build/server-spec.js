'use strict';

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiHttp = require('chai-http');

var _chaiHttp2 = _interopRequireDefault(_chaiHttp);

var _xmldoc = require('xmldoc');

var _xmldoc2 = _interopRequireDefault(_xmldoc);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _server = require('./server');

var _server2 = _interopRequireDefault(_server);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_chai2.default.use(_chaiHttp2.default);

// describe('Runtime arguments', () => {
//   it('should clean the output directory when called with --clean', (done) => {
//     process.argv = ['--clean']
//     chai.request(server)
//   })
// })
var toAddress = 'to@email.com';
var fromEmail = 'from@email.com';

describe('/POST SendEmail', function () {
  var ccAddress = 'cc@email.com';
  var bccAddress = 'bcc@email.com';
  var replyToAddress = 'replyTo@email.com';
  var htmlEmail = '<p>HTML Email</p>';
  var textEmail = 'Text Email';
  var emailSubject = 'Email Subject ðŸ˜Š';
  it('should succeed if email has all params', function (done) {
    _chai2.default.request(_server2.default).post('/').send({
      Action: 'SendEmail',
      'Destination.ToAddresses.member.1': toAddress,
      'Message.Body.Html.Data': htmlEmail,
      'Message.Body.Text.Data': textEmail,
      'Message.Subject.Data': emailSubject,
      'Destination.CcAddresses.member.1': ccAddress,
      'Destination.BccAddresses.member.1': bccAddress,
      'ReplyToAddresses.member.1': replyToAddress,
      Source: fromEmail
    }).end(function (err, res) {
      (0, _chai.expect)(res).to.have.status(200);
      var response = new _xmldoc2.default.XmlDocument(res.text);
      var path = response.valueWithPath('SendEmailResult.MessageId');
      (0, _chai.expect)(_fs2.default.readFileSync(path, 'utf8')).to.eq(htmlEmail);
      (0, _chai.expect)(_fs2.default.readFileSync(path.replace('body.html', 'body.txt'), 'utf8')).to.eq(textEmail);
      (0, _chai.expect)(_fs2.default.readFileSync(path.replace('body.html', 'headers.txt'), 'utf8')).to.eq('Subject: ' + emailSubject + '\nTo Address: ' + toAddress + '\nCc Address: ' + ccAddress + '\nBcc Address: ' + bccAddress + '\nReply To Address: ' + replyToAddress + '\nSource: ' + fromEmail);
      done();
    });
  });
  it('should succeed if only HTML body is missing', function (done) {
    _chai2.default.request(_server2.default).post('/').send({
      Action: 'SendEmail',
      'Destination.ToAddresses.member.1': toAddress,
      'Message.Body.Text.Data': textEmail,
      'Message.Subject.Data': emailSubject,
      'Destination.CcAddresses.member.1': ccAddress,
      'Destination.BccAddresses.member.1': bccAddress,
      'ReplyToAddresses.member.1': replyToAddress,
      Source: fromEmail
    }).end(function (err, res) {
      (0, _chai.expect)(res).to.have.status(200);
      done();
    });
  });
  it('should succeed if only Text body is missing', function (done) {
    _chai2.default.request(_server2.default).post('/').send({
      Action: 'SendEmail',
      'Destination.ToAddresses.member.1': toAddress,
      'Message.Body.Html.Data': htmlEmail,
      'Message.Subject.Data': emailSubject,
      'Destination.CcAddresses.member.1': ccAddress,
      'Destination.BccAddresses.member.1': bccAddress,
      'ReplyToAddresses.member.1': replyToAddress,
      Source: fromEmail
    }).end(function (err, res) {
      (0, _chai.expect)(res).to.have.status(200);
      done();
    });
  });
  it('should fail if one param is not sent', function (done) {
    _chai2.default.request(_server2.default).post('/').send({
      Action: 'SendEmail',
      'Message.Body.Html.Data': htmlEmail,
      'Message.Body.Text.Data': textEmail,
      'Message.Subject.Data': emailSubject,
      Source: fromEmail
    }).end(function (err, res) {
      (0, _chai.expect)(res).to.have.status(500);
      var response = new _xmldoc2.default.XmlDocument(res.text);
      (0, _chai.expect)(response.valueWithPath('Code')).to.eq('MessageRejected');
      (0, _chai.expect)(response.valueWithPath('Message')).to.eq('One or more required fields was not sent');
      done();
    });
  });
});

describe('/POST Unsupported action', function () {
  it('should fail if the action is not unsupported', function (done) {
    _chai2.default.request(_server2.default).post('/').send({ Action: 'SomeRandomAction' }).end(function (err, res) {
      (0, _chai.expect)(res).to.have.status(500);
      var response = new _xmldoc2.default.XmlDocument(res.text);
      (0, _chai.expect)(response.valueWithPath('Code')).to.eq('MessageRejected');
      (0, _chai.expect)(response.valueWithPath('Message')).to.eq('Unsupported action SomeRandomAction');
      done();
    });
  });
});

describe('/POST SendRawEmail', function () {
  it('should write the decoded message to disk', function (done) {
    _chai2.default.request(_server2.default).post('/').send({
      Action: 'SendRawEmail',
      'Destinations.member.1': toAddress,
      'RawMessage.Data': Buffer.from('Some raw email data').toString('base64'),
      Source: fromEmail
    }).end(function (err, res) {
      (0, _chai.expect)(res).to.have.status(200);
      var response = new _xmldoc2.default.XmlDocument(res.text);
      var path = response.valueWithPath('SendEmailResult.MessageId');
      (0, _chai.expect)(_fs2.default.readFileSync(path, 'utf8')).to.eq('Some raw email data');
      done();
    });
  });

  it('should fail if the raw message data is not sent', function (done) {
    _chai2.default.request(_server2.default).post('/').send({
      Action: 'SendRawEmail'
    }).end(function (err, res) {
      (0, _chai.expect)(res).to.have.status(500);
      done();
    });
  });
});