{"version":3,"sources":["../src/server.js"],"names":["app","log","console","successTemplate","readFileSync","__dirname","encoding","errorTemplate","use","json","urlencoded","extended","inverse","green","port","clean","undefined","red","outputDir","join","post","req","res","dateTime","Date","toISOString","body","Action","dateDir","slice","fullDir","replace","headers","Source","blue","process","cwd","writeFileSync","status","send","Error","err","message","listen"],"mappings":"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","file":"server.js","sourcesContent":["\n\n// Import node libs\nimport express from 'express'\nimport bodyParser from 'body-parser'\nimport path from 'path'\nimport chalk from 'chalk'\nimport fs from 'fs'\n// Import local libs\nimport mkdir from './library/mkdir'\nimport options from './library/options'\nimport rmdir from './library/rmdir'\n\nconst app = express()\nconst log = console.log\nconst successTemplate = fs.readFileSync(`${__dirname}/templates/success.xml`, { encoding: 'utf-8' })\nconst errorTemplate = fs.readFileSync(`${__dirname}/templates/error.xml`, { encoding: 'utf-8' })\n\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: true }))\n\nlog(`\n${chalk.inverse('  AWS Simple Email Service Local ðŸ“ª   ')}\n  ${chalk.green('Listening on port:')} ${options.port}`)\n\nif (options.clean !== undefined) {\n  log(`  ${chalk.red('Cleaning directory:')} ${options.outputDir}`)\n  rmdir(options.outputDir)\n}\n\nlog(`  ${chalk.green('Creating output directory:')} ${options.outputDir}`)\nmkdir(path.join(options.outputDir))\n\napp.post('/', (req, res) => {\n  const dateTime = new Date().toISOString()\n  if (req.body.Action === 'SendEmail') {\n    const dateDir = `${options.outputDir}/${dateTime.slice(0, 10)}`\n    const fullDir = `${dateDir}/${dateTime.slice(11, 22).replace(/:\\s*/g, '.')}`\n    const headers = `Subject: ${req.body['Message.Subject.Data']}\\nTo Address: ${req.body['Destination.ToAddresses.member.1']}\\nCc Address: ${req.body['Destination.CcAddresses.member.1']}\\nBcc Address: ${req.body['Destination.BccAddresses.member.1']}\\nReply To Address: ${req.body['ReplyToAddresses.member.1']}\\nSource: ${req.body.Source}`\n    try {\n      if (req.body.Source && req.body['Message.Subject.Data'] && req.body['Message.Body.Html.Data'] && req.body['Message.Body.Text.Data'] && req.body['Destination.ToAddresses.member.1']) {\n        mkdir(path.join(dateDir))\n        mkdir(path.join(fullDir))\n        log(`  ðŸ“¬  ${chalk.green('Email Received')}\n          ${chalk.blue('From:')} ${req.body.Source}\n          ${chalk.blue('To:')} ${req.body['Destination.ToAddresses.member.1']}\n          ${chalk.blue('Subject:')} ${req.body['Message.Subject.Data']}\n          ${chalk.blue('Html Email:')} ${process.cwd()}/${path.join(fullDir)}/body.html\n          ${chalk.blue('Text Email:')} ${process.cwd()}/${path.join(fullDir)}/body.txt\n        `)\n        fs.writeFileSync(`${fullDir}/body.html`, req.body['Message.Body.Html.Data'])\n        fs.writeFileSync(`${fullDir}/body.txt`, req.body['Message.Body.Text.Data'])\n        fs.writeFileSync(`${fullDir}/headers.txt`, headers)\n        res.status(200).send(\n          successTemplate.replace('{{message}}', `${process.cwd()}/${path.join(fullDir)}/body.html`)\n        )\n      } else {\n        throw new Error('One or more required fields was not sent')\n      }\n    } catch (err) {\n      log(`   ${chalk.red('Error Occured:')} ${err}`)\n      res.status(500).send(\n        errorTemplate.replace('{{code}}', 'MessageRejected').replace('{{message}}', err.message)\n      )\n    }\n  }\n})\n\napp.listen(options.port)\n\nexport default app"]}